<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Group extends \App\Entity\Group implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Group' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Group' . "\0" . 'members', '' . "\0" . 'App\\Entity\\Group' . "\0" . 'display_name', '' . "\0" . 'App\\Entity\\Group' . "\0" . 'security_title', '' . "\0" . 'App\\Entity\\Group' . "\0" . 'permissions', '' . "\0" . 'App\\Entity\\Group' . "\0" . 'enjoyable_services', '' . "\0" . 'App\\Entity\\Group' . "\0" . 'provided_services'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Group' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Group' . "\0" . 'members', '' . "\0" . 'App\\Entity\\Group' . "\0" . 'display_name', '' . "\0" . 'App\\Entity\\Group' . "\0" . 'security_title', '' . "\0" . 'App\\Entity\\Group' . "\0" . 'permissions', '' . "\0" . 'App\\Entity\\Group' . "\0" . 'enjoyable_services', '' . "\0" . 'App\\Entity\\Group' . "\0" . 'provided_services'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Group $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId(int $id): \App\Entity\Group
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getMembers(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMembers', []);

        return parent::getMembers();
    }

    /**
     * {@inheritDoc}
     */
    public function addMember(\App\Entity\User $member): \App\Entity\Group
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMember', [$member]);

        return parent::addMember($member);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMember(\App\Entity\User $member): \App\Entity\Group
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMember', [$member]);

        return parent::removeMember($member);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayName', []);

        return parent::getDisplayName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayName(string $display_name): \App\Entity\Group
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayName', [$display_name]);

        return parent::setDisplayName($display_name);
    }

    /**
     * {@inheritDoc}
     */
    public function getSecurityTitle(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSecurityTitle', []);

        return parent::getSecurityTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setSecurityTitle(string $security_title): \App\Entity\Group
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSecurityTitle', [$security_title]);

        return parent::setSecurityTitle($security_title);
    }

    /**
     * {@inheritDoc}
     */
    public function getPermissions(): \Doctrine\Common\Collections\Collection|array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPermissions', []);

        return parent::getPermissions();
    }

    /**
     * {@inheritDoc}
     */
    public function addPermission(\App\Entity\Permission $permission): \App\Entity\Group
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPermission', [$permission]);

        return parent::addPermission($permission);
    }

    /**
     * {@inheritDoc}
     */
    public function removePermission(\App\Entity\Permission $permission): \App\Entity\Group
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePermission', [$permission]);

        return parent::removePermission($permission);
    }

    /**
     * {@inheritDoc}
     */
    public function setPermissions(\Doctrine\Common\Collections\ArrayCollection|array $permissions): \App\Entity\Group
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPermissions', [$permissions]);

        return parent::setPermissions($permissions);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnjoyableServices()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnjoyableServices', []);

        return parent::getEnjoyableServices();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnjoyableServices($enjoyable_services)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnjoyableServices', [$enjoyable_services]);

        return parent::setEnjoyableServices($enjoyable_services);
    }

    /**
     * {@inheritDoc}
     */
    public function getProvidedServices()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProvidedServices', []);

        return parent::getProvidedServices();
    }

    /**
     * {@inheritDoc}
     */
    public function setProvidedServices($provided_services)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProvidedServices', [$provided_services]);

        return parent::setProvidedServices($provided_services);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
