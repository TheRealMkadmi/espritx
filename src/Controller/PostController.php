<?php

namespace App\Controller;

use App\Entity\Commentaire;
use App\Entity\Post;
use App\Entity\PostLike;
use App\Entity\User;
use App\Form\CommentaireType;
use App\Form\EditPostType;
use App\Form\PostContactType;
use App\Form\PostType;
use App\Repository\CommentaireRepository;
use App\Repository\PostLikeRepository;
use App\Repository\PostRepository;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\Persistence\ObjectManager;
use phpDocumentor\Reflection\Types\This;
use PhpParser\Node\Expr\Cast\Object_;
use Symfony\Bridge\Twig\Mime\TemplatedEmail;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Config\Definition\Exception\Exception;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Serializer\Encoder\JsonEncoder;

use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Contracts\Translation\TranslatorInterface;
use function Doctrine\Common\Annotations\AnnotationException;


class PostController extends AbstractController
{

  private $postRepository;
  private $entityManager;

  public function __construct(PostRepository $postRepository, EntityManagerInterface $entityManager)
  {
    $this->entityManager = $entityManager;
    $this->postRepository = $postRepository;
  }

  ///////////////////// Afficher tous les posts /////////////////////////
  /// en tant qu'administrateur je veux gerer les posts

  /**
   * @Route("admin/post/all", name="postall")
   * @param PostRepository $repository
   * @param Request $request
   * @return Response
   * @throws Exception
   */
  public function afficher_tous_les_Post(PostRepository $repository, Request $request,SerializerInterface $serializer): Response
  {
    $posts = $repository->findAll();
    //$json=$serializer->serialize($posts,'json',['groups'=>'posts']);
   // dump($json);
   // die;
    return $this->render('views/content/posts/Admin/allpost.html.twig', ['posts' => $posts]);
  }


  /////////////////// Ajouter post /////////////////
  /// En tant qu'utilisateur, je veux ajouter une publication.
  ///
  /**
   * @Route("/post/new", name="newpost")
   * @param Request $request
   * @param UserRepository $repository
   * @return Response
   * @throws Exception
   */
  public function ajouterPost(Request $request, UserRepository $repository): Response
  {
    try {
      $now = new \DateTimeImmutable('now');
      $post = new Post();
      $form1 = $this->createForm(PostType::class, $post);
      $form1->handleRequest($request);

      $em = $this->getDoctrine()->getManager();
      if (($form1->isSubmitted() && $form1->isValid())) {
          $a = $request->request->get('markers1');
          $b = $request->request->get('markers2');
          $post->setLongitude($a);
          $post->setLatitude($b);
        $file = $form1->get('image')->getData();
        $fileName = md5(uniqid()) . '.' . $file->guessExtension();
        $file->move(
          $this->getParameter('imagesPost_directory'),
          $fileName
        );
        $post->setImage($fileName);
        $post->setIsValid(0);
        $post->setIsDeleted(0);

        $post->setCreatedAt($now);
        $post->setUpdatedAt($now);

        $post->setUser($repository->find($this->getUser()->getId()));
        $em->persist($post);
        $em->flush();
        $request->getSession()->getFlashBag()->add("info", "Publication ajoutée ");


        // $this->addFlash("info", "Publication ajoutée ");

        return $this->redirectToRoute("acceuil_user_posts");
      }
    } catch (\Exception $e) {
      echo "Exception Found - " . $e->getMessage() . "<br/>";
    }
    return $this->render('views/content/posts/User/newPost.html.twig', [
      'form' => $form1->createView(),
      'breadcrumbs' => [
        ["name" => "Management"],
        ["name" => "posts", "link" => "postall"],
      ],
    ]);
  }

  /**
   * @return string
   */
  private function generateUniqueFileName()
  {
    // md5() reduces the similarity of the file names generated by
    // uniqid(), which is based on timestamps
    return md5(uniqid());
  }
////////////////////Modifuer Post ////////////////////////////////////
/// En tant qu'utilisateur, je veux modifier une publication.
  /**
   * @Route("/post/edit/{id}", name="editpost")
   * @param Request $request
   * @param UserRepository $repository
   * @return Response
   * @throws Exception
   */
  public function editpublication($id, Request $request, UserRepository $repository, PostRepository $rep): Response
  {

    $post = $rep->find($id);

    $form1 = $this->createForm(EditPostType::class, $post);
    $form1->handleRequest($request);

    // dd($post);
    $em = $this->getDoctrine()->getManager();
    if (($form1->isSubmitted() && $form1->isValid())) {
        $a = $request->request->get('markers1');
        $b = $request->request->get('markers2');
        $post->setLongitude($a);
        $post->setLatitude($b);

      // $post->setImage(
      //   new File($this->getParameter('uploads/brochures').'/'.$post->getImage())
      //);
      $post->setUpdatedAt(new \DateTimeImmutable('now'));
      $post->setUser($repository->find($this->getUser()->getId()));
      $em->persist($post);

      $em->flush();
        $request->getSession()->getFlashBag()->add("info", "Publication modifiée ");
      return $this->redirectToRoute("acceuil_user_posts");
    }
    return $this->render('views/content/posts/User/editPost.html.twig', ['form' => $form1->createView()]);

  }

  //////////////////Supprimer Post ////////////////////////////////////////
  /// En tant qu'utilisateur, je veux supprimer une publication.

  /**
   * @Route("/user/post/changedelete/{id}",name="changedelete_post")
   */
  public function supprimer_Post_user(Post $post, PostRepository $postRepository,Request $request)
  {
    $post = $postRepository->changeDelete($post);
      $request->getSession()->getFlashBag()->add("info", "Publication supprimée");
    return $this->redirectToRoute('acceuil_user_posts');
    // return $this->json(["message"=>"success","value"=>$post->getIsDeleted()]);
  }

  /////////////////////////////Approuver Post/////////////////////
  /// En tant qu'administrateur, je veux approuver une publication.
  /// En tant qu'administrateur, je veux refuser une publication.
  /**
   * @Route("/admin/post/changevalidite/{id}",name="changevalidite_post")
   */
  public function approuverPost(Post $post, PostRepository $postRepository)
  {
    $post = $postRepository->changeValidite($post);
    //  $this->addFlash('success', 'Publication approuvée');
    // return $this->json(["message"=>"success","value"=>$post->getIsValid()]);
    $this->addFlash('success', 'Publication bien été approuvée');
    return $this->redirectToRoute('postall');

  }

  //////////////////////////Supprimer Post //////////////////////////////
  /// En tant qu'administrateur, je veux supprimer defintivement une publication.

  /**
   * @Route("/admin/delete/post/{id}",name="deletepost_admin")
   */
  public function supprimer_Post_admin($id)
  {


    $entityManager = $this->getDoctrine()->getManager();

    $post = $entityManager->getRepository(Post::class)->find($id);
    $entityManager->remove($post);
    $this->addFlash('success', 'Publication bien été supprimée.');


    $entityManager->flush();
    return $this->redirectToRoute('postall');


  }
////////////////////////////// Acceuil posts ////////////////////////////
/// Entant qu'utilisateur je veux consulter les postes
  /**
   * @Route("/acceuil/user/post",name="acceuil_user_posts")
   */
  public function afficher_posts(PostRepository $repository, Request $request, CommentaireRepository $commentaireRepository)
  {
    // dd($request->getContent());
    $commentaire = new Commentaire();
    $form = $this->createForm(CommentaireType::class, $commentaire);
    $posts = $repository->getLatestPosts();


    $comments = $repository->CommentsMaxQuatre();
//dd($commentaire);


    $forms = [];




    return $this->render('views/content/posts/User/acceuilposts.html.twig', ['comments' => $comments, 'posts' => $posts, 'form' => $form->createView()]);


  }
/////////////////////////////////////////////////////////////////////////////////////////////// Commentaires /////////////////////////////////
///


  /**
   * @Route("/post/{id}/addcomment", name="newcomment")
   * @param $id
   * @param Request $request
   * @param PostRepository $repository
   * @param UserRepository $rep
   * @return Response
   */
  public function addcomment($id, Request $request, PostRepository $repository, UserRepository $rep): Response
  {
    $pub = $repository->find($id);
    $now = new \DateTimeImmutable('now');
    $commentaire = new Commentaire();
//        $comment = $_POST['aa'];
    $form = $this->createForm(CommentaireType::class, $commentaire);
    $form->handleRequest($request);

    $data = $request->request->get('aa');
    //  dd($data);
    //if ($form->isSubmitted() && $form->isValid()) {

    $em = $this->getDoctrine()->getManager();
    $commentaire->setCreatedAt($now);
    $commentaire->setUser($rep->find($this->getUser()->getId()));
    $commentaire->setPost($pub);
    $commentaire->setContent($data);
    $em->persist($commentaire);
    $em->flush();
    return $this->json(['code' => 200, 'nbrcomments' => $pub->getCommentaires()->count(),
      'commentaire' => $commentaire->getContent(),
      'dateajout' => $commentaire->getCreatedAt()->format('H:i')], 200);
    //  }
    //   return $this->json(['code' => 200, 'nbrcomments' => $pub->getCommentaires()->count(),
    // ], 200);
  }


  /**
   * @Route("/comment/neww/{id}", name="comment_new")
   * @param Request $request
   * @param UserRepository $repository
   * @return Response
   * @throws Exception
   */
  public function ajouterComment($id, Request $request, UserRepository $repository, PostRepository $postRepository): Response
  {
    $commentaire = new Commentaire();
    $form = $this->createForm(CommentaireType::class, $commentaire);

    $now = new \DateTimeImmutable('now');

    $post = $postRepository->find($id);
    $form->handleRequest($request);

    $em = $this->getDoctrine()->getManager();
    if (($form->isSubmitted() && $form->isValid())) {
      $commentaire->setPost($post);

      $commentaire->setCreatedAt($now);


      $commentaire->setUser($repository->find($this->getUser()->getId()));
      $em->persist($commentaire);
      $em->flush();


      $this->addFlash("success", "Publication ajoutée ");
      return $this->json(['code' => 200, 'nbrcomments' => $post->getCommentaires()->count(),
        'dateajout' => $commentaire->getCreatedAt()->format('H:i')], 200);


    }


    return $this->render('views/content/posts/User/newComment.html.twig', ['form' => $form->createView()]);
  }

//////////////////////////////////////////////////Comment Modif////////////////////////////
/// en tant qu'utilisateur je veux editer mon commentaire
  /**
   * @Route("/comment/edit/{id}", name="editcomment")
   * @param Request $request
   * @param UserRepository $repository
   * @return Response
   * @throws Exception
   */
  public function editcommentaire($id, Request $request, UserRepository $repository, CommentaireRepository $rep): Response
  {

    $comm = $rep->find($id);

    $form1 = $this->createForm(CommentaireType::class, $comm);
    $form1->handleRequest($request);

    // dd($post);
    $em = $this->getDoctrine()->getManager();
    if (($form1->isSubmitted() && $form1->isValid())) {


      $comm->setUser($repository->find($this->getUser()->getId()));
      $em->persist($comm);

      $em->flush();
      $this->addFlash('notice', 'Commentaire modifiée avec succée !');
      return $this->redirectToRoute("acceuil_user_posts");
    }
    return $this->render('views/content/posts/User/editComment.html.twig', ['form' => $form1->createView()]);

  }

/////////////////////////////////////Delete comment//////////////////////////////
/// En tant qu'utilisateur je veux supprimer mes commentaires////////////////////
  /**
   * @Route("/user/delete/post/{id}",name="delete_commnt_user")
   */
  public function supprimerComment($id)
  {


    $entityManager = $this->getDoctrine()->getManager();

    $post = $entityManager->getRepository(Commentaire::class)->find($id);
    $entityManager->remove($post);
    $this->addFlash('success', 'commentaire bien été supprimée.');


    $entityManager->flush();
    return $this->redirectToRoute('acceuil_user_posts');


  }

///////////////////////// Likes ////////////////////////////
/// cette fonction permet de liker ou unliker un post
  /**
   * @param Post $post
   * @param PostLikeRepository $likeRepository
   * @return Response
   * @Route ("/post/{id}/like", name="post_like")
   */
  public function like(Request $request, Post $post, PostLikeRepository $likeRepository): Response
  {
    $em = $this->getDoctrine()->getManager();
    $user = $this->getUser();
    // savoir si le user est connecté ou nn
    if (!$user) return $this->json([
      'code' => 403,
      'message' => 'il faut etre connecté'
    ], 403);
    // savoir si ce post est liké par user ou non
    if ($post->isLikedByUser($user)) {
      // retrouver le j'aime
      $like = $likeRepository->findOneBy([
        'post' => $post,
        'user' => $user
      ]);
      $em->remove($like);
      $em->flush();
      $request->getSession()->getFlashBag()->add("info", "oh oh !! ");
      return $this->json([
        'code' => 200,
        'message' => 'like bien supprimé',
        'likess' => $likeRepository->count(['post' => $post])
      ], 200);

    }

    $like = new PostLike();
    $like->setPost($post)
      ->setUser($user);
    $em->persist($like);
    $em->flush();
    $request->getSession()->getFlashBag()->add('info', 'Merci');
    return $this->json([
      'code' => 200,
      'message' => 'like bien ajouté',
      'likess' => $likeRepository->count(['post' => $post])
    ], 200);


  }

  /**
   * @Route("/post/{id}", name="singlepost")
   * @param PostRepository $repository
   * @param Request $request
   * @return Response
   */
  public function singlepost($id, PostRepository $repository, Request $request,\Swift_Mailer $mailer): Response
  {
    $pub = $repository->find($id);
    $commentaire = new Commentaire();
    $form = $this->createForm(CommentaireType::class, $commentaire);


      $formcontact= $this->createForm(PostContactType::class);




      $contact= $formcontact->handleRequest($request);

     if($formcontact->isSubmitted() && $formcontact->isValid()) {

         // hadharna l mail


         $message = (new \Swift_Message('Hello Email'))
             ->setFrom($contact->get('email')->getData())
             ->setTo($pub->getUser()->getEmail())
             ->setBody(
                 $this->renderView(
                 // templates/emails/registration.html.twig
                     'views/content/posts/email/contact_post.html.twig',
                     [
                         'post' => $pub,
                         'mail' => $contact->get('email')->getData(),
                         'message' => $contact->get('message')->getData()
                     ]
                 ),
                 'text/html'
             );




      /*   $email = (new TemplatedEmail())
             ->from($contact->get('email')->getData())
             ->to($pub->getUser()->getEmail())
             ->subject('Contact au sujet de votre post "' . $pub->getTitle() . '"')
             ->htmlTemplate('views/content/posts/email/contact_post.html.twig')
             ->context([
                 'post' => $pub,
                 'mail' => $contact->get('email')->getData(),
                 'message' => $contact->get('message')->getData()
             ]);*/
         // nab3eth l mail
         $mailer->send($message);
         // on confirme et on redirige
         $this->addFlash('message','Votre email a bien envoyé ');
         return $this->redirectToRoute('singlepost',['id'=>$pub->getId()]);

     }



    return $this->render('views/content/posts/User/SinglPost.html.twig', ['formContact'=>$formcontact->createView(),'post' => $pub, 'form' => $form->createView()]);
  }


  ////////////////////////////////////// ///////////////////////////////   API /////////////////// //////////////////  //////////////

    /**
     * @Route("api/post/all", name="postall_api")
     * @return Response
     * @throws Exception
     */
    public function api_tous_les_Post(PostRepository $repository,NormalizerInterface $normalizer): Response
    {
        $posts = $repository->findAll();
        $jsoncontent=$normalizer->normalize($posts,'json',['groups'=>'post:read']);
        return new Response(json_encode(($jsoncontent)));

    }
    /**
     * @Route ("api/addPost",name="addpost_api")
     */

    public function addPost_api(Request $request,NormalizerInterface $normalizer){
        $now = new \DateTimeImmutable('now');
        $donnees=json_decode($request->getContent());
        $em=$this->getDoctrine()->getManager();
        $post=new Post();
        $post->setIsValid(0);
        $post->setIsDeleted(0);

        $post->setCreatedAt($now);
        $post->setUpdatedAt($now);
$user=$this->getDoctrine()->getRepository(User::class)->find(2);
        $post->setUser($user);
        $post->setTitle($donnees->title);
        $post->setContent($donnees->content);

        $em->persist($post);
        $em->flush();
//$jsoncontent=$normalizer->normalize($post,'json',['groups'=>'post:read']);

        return new Response('post ajouté');

    }

/*
    public function addPost_api(Request $request,SerializerInterface $serializer,EntityManagerInterface $entityManager){

        $content=$request->getContent();

        $data=$serializer->deserialize($content,Post::class,'json');
        $entityManager->persist($data);
        $entityManager->flush();
        return new Response('post ajouté');

    }
*/
    /**
     * @param Request $request
     * @param $id
     * @param NormalizerInterface $normalizer
     * @Route("/api/post/{id}" , name="api_post_id")
     */


    public function Post_By_Id_JSON(Request $request,$id,NormalizerInterface $normalizer){
        $em=$this->getDoctrine()->getManager();
        $post=$em->getRepository(Post::class)->find($id);
        $jsoncontent=$normalizer->normalize($post,'json',['groups'=>'post:read']);
        return new Response(json_encode(($jsoncontent)));
    }

    /**
     * @param Request $request
     * @param NormalizerInterface $normalizer
     * @param $id

     */


    /**
     * @param Request $request
     * @param NormalizerInterface $normalizer
     * @param $id
     * @return Response
     * @throws \Symfony\Component\Serializer\Exception\ExceptionInterface
     * @Route("/api/updatePost/{id}",name="api_post_update")
     */
public function Update_Post_Json(Request $request,NormalizerInterface $normalizer,$id){
    $now = new \DateTimeImmutable('now');
    $em= $this->getDoctrine()->getManager();
    $post=$em->getRepository(Post::class)->find($id);
    $post->setIsValid(0);
    $post->setIsDeleted(0);

    $post->setCreatedAt($now);
    $post->setUpdatedAt($now);
    $user=$this->getDoctrine()->getRepository(User::class)->find(2);
    $post->setUser($user);
    $post->setTitle($request->get('title'));
    $post->setContent($request->get('content'));
    $em->flush();
    $content=$normalizer->normalize($post,'json',['groups'=>'post:read']);
    return new Response("Post bien modifié".json_encode($content));


}

    /**
     * @param Request $request
     * @param NormalizerInterface $normalizer
     * @param $id
     * Route("/api/DeletePost/{id}",name="api_delete_post", methods={"DELETE"})
     * @return Response
     * @throws \Symfony\Component\Serializer\Exception\ExceptionInterface
     */

public function deletePost_Json(NormalizerInterface $normalizer,$id){

    $em=$this->getDoctrine()->getManager();
    $post=$em->getRepository(Post::class)->find($id);
    $em->remove($post);
    $em->flush();
    $content=$normalizer->normalize($post,'json',['groups'=>'post:read']);
    return new Response("Post bien eté supprimé".json_encode($content));
}


}